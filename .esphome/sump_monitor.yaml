#**************************************************************
#  PROJECT:            <Project Name>
#  DEVICE/BOARD:       <Board/Model>
#  VERSION:            <Version>
#  AUTHOR:             John Camm
#  LAST UPDATED:       <YYYY-MM-DD>
#**************************************************************
#  DESCRIPTION
#    <Concise project description and feature summary>
#
#**************************************************************
#  SENSOR & FEATURE SPECIFICATIONS
#    <Structured, bulleted specs for each major component>
#
#**************************************************************
#  GPIO PIN ASSIGNMENTS
#  -------------------------------------------------------------------
#    GPIO    |   Function / Peripheral
#  ----------|--------------------------------------------------------
#    GPIOx   |   <Description>
#    ...     |   ...
#  -------------------------------------------------------------------
#
#**************************************************************
#  USAGE NOTES (if needed)
#    <Any wiring, calibration, or deployment notes>
#
#**************************************************************
#  CHANGELOG
#    [vX.X.X] - YYYY-MM-DD
#      - <Key changes>
#**************************************************************

# === ESPHome Core & Board Setup ===
esphome:
  name: "sump"
  friendly_name: "sump monitor"
  min_version: "2024.3.2"
  comment: Water tank monitor with JSN-SR04T, RGB LED, runtime geometry/calibration (esp32-c3)

# Specify the correct ESP32-C3 board and framework
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# === External Components ===
external_components:
  - source:
      path: components
      type: local

# === Logging Configuration ===
logger:
  level: INFO      # Set log verbosity (DEBUG/INFO/WARN/ERROR)

# === API, OTA, WiFi, and Web Server Setup ===
api:
  encryption:
    key: "JwqBjUz5FmqKZuYm/j02mJyDKKPn0R6wQWHEp4evdA0="

ota:
  - platform: esphome
    password: "dd5160f7fc66e18c606edc6a54c27d44"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Esp32-C3-1 Fallback Hotspot"
    password: "RWk4AL3ME215"

# ESPHome's built-in web server for configuration and monitoring
web_server:
  version: 3
  auth:
    username: saintmoor
    password: saintmoor
  sorting_groups:
    - id: water_values
      name: "Water"
      sorting_weight: -20
    - id: water_status
      name: "Status"
      sorting_weight: -15
    - id: config_settings
      name: "Config"
      sorting_weight: -10

# === Time Configuration ===
time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

# === Global Variables for Tank Geometry and Calibration ===
globals:
  - id: basin_radius_in
    type: float
    initial_value: '12'      # Basin radius in inches
  - id: basin_height_in
    type: float
    initial_value: '36'     # Basin length in inches
  - id: basin_capacity_gal
    type: float
    initial_value: '70.5'    # Basin capacity in gallons
  - id: basin_volume_gal
    type: float
    initial_value: '0'       # Basin volume in gallons
  - id: empty_distance_in
    type: float
    initial_value: '36'      # Distance from sensor to bottom (empty tank)
  - id: full_distance_in
    type: float
    initial_value: '5'       # Distance from sensor to full water level
  - id: sen0312_bytes
    type: std::vector<uint8_t>
    initial_value: 'std::vector<uint8_t>()'

# === Web UI Controls for Basin Geometry ===
number:
  - platform: template
    id: basin_radius_number
    name: "Radius (in)"
    min_value: 10
    max_value: 30
    step: 0.1
    initial_value: 12
    internal: true
    set_action:
      - lambda: |-
          id(basin_radius_in) = x;
    web_server:
      sorting_group_id: config_settings
  - platform: template
    id: basin_height_number
    name: "Height (in)"
    min_value: 12
    max_value: 48
    step: 1
    initial_value: 36
    internal: true
    set_action:
      - lambda: |-
          id(basin_height_in) = x;
    web_server:
      sorting_group_id: config_settings
  - platform: template
    id: basin_capacity_gal_number
    name: "Capacity (gal)"
    min_value: 10.0
    max_value: 220.0
    step: 10.0
    initial_value: 70.5
    internal: true
    set_action:
      - lambda: |-
          id(basin_capacity_gal) = x;
    web_server:
      sorting_group_id: config_settings

# === Optional I2C Bus (for future expansion, not required for core function) ===
i2c:
  sda: GPIO7
  scl: GPIO9
  scan: true
  id: bus_a

# === RGB Status LED Configuration (NeoPixel WS2811, GPIO8) ===
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    icon: "mdi:led-strip"
    pin: GPIO08
    id: onboard_led
    num_leds: 1
    name: "Onboard LED"
    restore_mode: ALWAYS_ON
    on_turn_on:
      then:
        - light.control:
            brightness: 50%
            id: onboard_led
            effect: Green
    effects:
      - addressable_color_wipe:
          name: Red
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: Green
          colors:
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: Blue
          colors:
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: White
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: Yellow
          colors:
            - red: 100%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 2s
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Blink"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 10%
          max_brightness: 40%

# === Intervals ===
interval:
  - interval: 1min
    then:
      - lambda: |-
          float r = id(basin_radius_in);
          float l = id(basin_height_in);
          float max_h = id(empty_distance_in) - id(full_distance_in);
          float theta = acos((r - max_h) / r);
          float segment_area = r * r * (theta - sin(2 * theta) / 2.0);
          float volume_cubic_inches = segment_area * l;
          id(basin_capacity_gal) = volume_cubic_inches / 231.0;
  - interval: 5s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display

# ==== OLED Configuration ===
font:
  - file: "gfonts://Roboto"
    id: roboto_medium
    size: 15
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_large
    size: 48
  - file: 'fonts/arial.ttf'
    id: arial_medium
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    i2c_id: bus_a
    id: oled_display
    auto_clear_enabled: true
    invert: false
    update_interval: 50ms
    show_test_card: false
    pages:
      - id: page1 
        lambda: |-
          // it.printf(X, Y,.. (X (Row) and Y (Column)) 
          // Print "Sump" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Sump");
          // Print time in HH:MM format
          it.strftime(0, 60, id(bebasneue_large), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          // Print Distance to Water
          if (id(distance_raw).has_state()) {
          it.printf(127, 23, id(arial_medium), TextAlign::TOP_RIGHT, "%.0f in", id(distance_raw).state);
          }
          // Print Water Height
          if (id(distance_in).has_state()) {
          it.printf(127, 60, id(arial_medium), TextAlign::BASELINE_RIGHT, "%.0f in", id(distance_in).state);
          }
      - id: page2 
        lambda: |-
          // Print "Water Height" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Height (in)");
          // Print Water Height
          if (id(distance_in).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.0f", id(distance_in).state);
          }

uart:
  id: uart_bus
  tx_pin: GPIO2 # Connect to DYP RX
  rx_pin: GPIO0 # Connect to DYP TX
  baud_rate: 9600
  stop_bits: 1
  rx_buffer_size: 4

sensor:
# === Ultrasonic Water Level Sensor (JSN-SR04T, GPIO1: Trigger, GPIO3: Echo) ===
  - platform: ultrasonic
    trigger_pin:
      number: GPIO3
      inverted: true
    echo_pin:
      number: GPIO1
    name: "Distance"
    id: distance_raw
    icon: mdi:arrow-expand-vertical
    update_interval: 1s
    accuracy_decimals: 2
    unit_of_measurement: "m"
    pulse_time: 20us
    web_server:
      sorting_group_id: water_values
  - platform: template
    name: "Distance (in)"
    id: distance_in
    icon: mdi:arrow-expand-vertical
    unit_of_measurement: "in"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      // Convert inches to meters (39.3700787 in = 1 m)
      if (isnan(id(distance_raw).state)) return NAN;
      return id(distance_raw).state * 39.3700787;
    web_server:
      sorting_group_id: water_values

  # ESP uptime sensor for diagnostics
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 5s

# === Text Sensors for Calibration, Status, and Diagnostics ===
text_sensor:
  # WiFi info for troubleshooting
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: mdi:ip
    ssid:
      name: "Connected SSID"
      icon: mdi:wifi
  # Formatted uptime string for UI
  - platform: template
    name: "Uptime (formatted)"
    id: uptime_formatted
    icon: "mdi:timer-outline"
    entity_category: "diagnostic"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      uint32_t dys = dur / 86400;
      dur %= 86400;
      uint32_t hrs = dur / 3600;
      dur %= 3600;
      uint32_t mnts = dur / 60;
      dur %= 60;
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};

binary_sensor:
  - platform: status
    name: "Status" # Device online/offline status
    icon: "mdi:state-machine"

# === End of File ===
